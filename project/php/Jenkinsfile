//write by orasun@vip.qq.com 2019/11/13 15:39
pipeline {
  agent any
  environment {
        HARBOR_CREDS = credentials('jenkins-harbor-test-creds')
        CHARTMUSEUM_CREDS = credentials('chartmuseum-creds')
        DATE_TAG = sh(returnStdout: true,script: 'date "+%Y%m%d%H%M%S"').trim()
        PROJECT_NAME = 'gswz'
		BUILD_USER=''
		
    }

  parameters {
        string(name: 'PROJECT_NAME', defaultValue: 'gswz', description: '实施项目名:')
		string(name: 'HARBOR_HOST', defaultValue: 'harbor.frcloud.io', description: 'harbor仓库地址:')
        string(name: 'DOCKER_IMAGE', defaultValue: "test/gswz", description: 'docker镜像名:')
		
	}

  
  
 stages{

  stage ('进入前进行权限的识别'){
    steps{
	  script{
	     env.BUILD_USER_ID=''
	     wrap([$class:'BuildUser']){		 
		 env.BUILD_USER_ID = sh(returnStdout: true,script: 'echo "${BUILD_USER_ID}"|sed s/.*_//g').trim()
	    }
		 echo "${env.BUILD_USER_ID}"
	   }
	}
   }
 
   
  stage('进入开发部署入口') {
    when {
	 expression { return env.BUILD_USER_ID == 'dev'} 
	 }
	agent any
    stages{
    stage('部署前的询问') {
	  steps {
			script {
				env.deployenv =input (
					message: "请选择以下的方式进行构建",
				ok: "Yes",
				parameters: [
						choice(description: '',name: 'dev_env_choice',choices: ['docker构建->harbor仓库->helm仓库', 'docker构建->harbor仓库->helm仓库->开发环境', '根据版本号更新或回滚开发环境'])
				]
				)

		} 
      }
    }		

   
    stage('Docker构建镜像并推送到Harbor仓库') {
     when {
	 expression { return env.deployenv == 'docker构建->harbor仓库->helm仓库' || env.deployenv == 'docker构建->harbor仓库->helm仓库->开发环境'} 
	 }
	  steps {
          sh "docker login -u ${HARBOR_CREDS_USR} -p ${HARBOR_CREDS_PSW} ${params.HARBOR_HOST}"
          sh "docker build  -t ${params.HARBOR_HOST}/${params.DOCKER_IMAGE}:${DATE_TAG} ."
          sh "docker push ${params.HARBOR_HOST}/${params.DOCKER_IMAGE}:${DATE_TAG}"
          sh "docker rmi ${params.HARBOR_HOST}/${params.DOCKER_IMAGE}:${DATE_TAG}"
          sh "docker images"
      }
    }
    
    stage('Chart构建并推送到Helm仓库') {
	  	when {
	 expression { return env.deployenv == 'docker构建->harbor仓库->helm仓库' || env.deployenv == 'docker构建->harbor仓库->helm仓库->开发环境'} 
	 }
          steps {

       script {
          def filename = "chart/${params.PROJECT_NAME}/values.yaml"
          def data = readYaml file: filename
          data.image.tag = env.DATE_TAG
          sh "rm $filename"
          writeYaml file: filename, data: data
        }

       script {
          def filename = "chart/${params.PROJECT_NAME}/Chart.yaml"
          def data = readYaml file: filename
          data.version = env.DATE_TAG
          sh "rm $filename"
          writeYaml file: filename, data: data
        }
      
           script {
		   dir('chart') {
		   
          sh "/usr/local/bin/helm push ${params.PROJECT_NAME} chartmuseum --username=${CHARTMUSEUM_CREDS_USR} --password=${CHARTMUSEUM_CREDS_PSW}  --version=$DATE_TAG"
           }
		  echo "列出最近10个最新的TAG版本号"
          sh "/usr/local/bin/helm search gswz -l |awk '{print \$2}'|sed -n '2,11p'"
		}          
           
 
      }
    }

    stage('部署到k8s开发环境') {
       	when {
	 expression { return  env.deployenv == 'docker构建->harbor仓库->helm仓库->开发环境'} 
	 }
      steps {
          dir("chart/${params.PROJECT_NAME}") {
            sh "/usr/local/bin/helm upgrade ${params.PROJECT_NAME}-dev --install --namespace=dev --set deploymentenv=dev --set ingress.host=${params.PROJECT_NAME}.dev.frcloud.io ."
          }
        
      }
    }	 
		 
	stage('根据版本号更新或回滚开发环境') {
       	when {
	 expression { return  env.deployenv == '根据版本号更新或回滚开发环境'} 
	 }
      steps {
	      script {
//		  env.top10 = sh(returnStdout: true,script: "/usr/local/bin/helm search gswz -l |awk '{print \$2}'|sed -n '2,11p'").trim()
          env.top10 = sh(returnStdout: true,script: "/usr/local/bin/helm history ${params.PROJECT_NAME}-dev |tac |sed -n '1,10p'|awk '{print \$1,\$7,\$8,\$9}'").trim()
	      env.RELEASE =input (
					message: "以下显示最近10个版本号:\n\n ${env.top10}",
					
				ok: "Deploy",
				parameters: [
				  [$class:
				 'TextParameterDefinition',
				 defaultValue:'1.0.0',
				 description:'请输入版本号:',
				 name:'release']
				]
				)
	      }
          dir("chart/${params.PROJECT_NAME}") {
            sh "/usr/local/bin/helm rollback ${params.PROJECT_NAME}-dev ${env.RELEASE}"
            sh "/usr/local/bin/helm history ${params.PROJECT_NAME}-dev |tac |sed -n '1,10p'|awk '{print \$1,\$7,\$8,\$9}'"
		  }
        
      }
    }		  
		 	 
   } 
  }
   





	
	}
   }  
     

 
 
